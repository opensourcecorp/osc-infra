if ENV['OSC_ROOT'].nil?
  puts "Environment variable OSC_ROOT is unset; setting Vagrant root directory as '..'"
  root = '..'
else
  puts "Environment variable OSC_ROOT is set as \"#{ENV['OSC_ROOT']}\"; will use that as Vagrant root directory"
  root = ENV['OSC_ROOT']
end

# Potential fix as described at link below, for when Vagrant is mad about DHCP
# conflicts:
# https://github.com/hashicorp/vagrant/issues/8878#issuecomment-345112810
class VagrantPlugins::ProviderVirtualBox::Action::Network
  def dhcp_server_matches_config?(dhcp_server, config)
    true
  end
end
# HOWEVER, you'll still see "non-static" IPs defined as rand() calls in child
# Vagrantfiles, because I still can't get this to work

# If you find yourself memory-constrained locally, you can selectively add
# additional OSC subsystems with the env var 'OSC_SUBSYSTEMS', which is a
# comma-separated string of subsystem names. The earlier the subsystem shows up
# in the list, the more important it is for downstream subsystems
core_subsystems = [
  "configmgmt", # need always
  "netsvc", # need always
  "datastore", # need for most
  # "sourcecode", # needs datastore, but only at use-time, not boot-time
  # "ociregistry", # needs datastore
  # "cicd" # needs ociregistry
]
if ENV['OSC_SUBSYSTEMS'].nil?
  puts "Environment variable OSC_SUBSYSTEMS is unset, so starting core subsystems only:"
  subsystems = core_subsystems
  puts subsystems
else
  puts "Environment variable OSC_SUBSYSTEMS was set as '#{ENV['OSC_SUBSYSTEMS']}', so will try to start those listed in addition to core subsystems:"
  addl_subsystems = ENV['OSC_SUBSYSTEMS'].split(',')
  subsystems = core_subsystems + addl_subsystems
  puts subsystems
end

subsystems.each do |subsystem|
  load "#{root}/#{subsystem}/Vagrantfile"
end
